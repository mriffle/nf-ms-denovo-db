/**
 * # Parameters for nf-maccoss-trex
 *
 * A NextFlow pipeline for analyzing data-ind
 */
params {
    /** \group{Input/Output Parameters} */

    /** \type{string} \required
     *  Path to the FASTA file containing the subset of proteins sequences to
     *  search.
     */
    fasta = null

    /** \type{string} \required
     *  The directory containing the mzML or raw files to search
     */
    spectra_dir = null

    /** \type{string} \required
     *  Location of the comet params file
     */
    comet_params = 'comet.params'

    /** \type{string} \required
     *  Location of the casanovo params file
     */
    casanovo_config_file = 'casanovo.yaml'

    /** \type{string} \required
     *  Location of the casanovo model weights file
     */
    casanovo_weights = 'casanovo_massivekb.ckpt'

    /** \type{string} \required
     *  Location of a FASTA containing well-annotated protein sequences
     *  E.g., swiss-prot
     */
    library_fasta = './swissprot.fasta'

    /** \type{string} \required
     *  The decoy prefix to use when generating decoys
     */
    decoy_prefix = 'DECOY_'

    /** \type{int} \required
     *  Gap initiation penalty used by glsearch36
     */
    glsearch.gap_initiation_penalty = 0

    /** \type{int} \required
     *  Gap extension penalty used by glsearch36
     */
    glsearch.gap_extension_penalty = -33

    // the requested number of splits to make of the peptide fasta before
    // searching with glsearch36. more splits allow running more of this
    // step in parallel, and avoiding any timeout issues with each task
    requested_fasta_parts = 10

    result_dir = 'results/nf-ms-denovo-db' /** \type{str} Where results will be saved. */
    report_dir = 'reports/nf-ms-denovo-db' /** \type{str} Where results will be saved. */
    email = null           /** \type{str} An email to alert on completion. */

}

plugins {
    id 'nf-amazon'
}

docker {
    enabled = true
}

// Execution Profiles
profiles {

    /*
     * Params for running pipeline on the local computer (e.g.:
     * your laptop). These can be overridden in the local config file.
     */
    standard {
        process.executor = 'local'

        // limit nextflow to running 1 task at a time
        executor.queueSize = 1

        params.max_memory = '12.GB'
        params.max_cpus = 8
        params.max_time = '240.h'

        // where to cache mzml files after running msconvert
        params.mzml_cache_directory = '/data/mass_spec/nextflow/nf-ms-denovo-db/mzml_cache'
    }

}

// Manifest
manifest {
    name            = 'ms-denovo-db'
    author          = 'Michael Riffle'
    homePage        = 'https://github.com/mriffle/nf-ms-denovo-db'
    description     = 'ms-denovo-db'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.report_dir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.report_dir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.report_dir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = false
    file    = "${params.report_dir}/pipeline_dag_${trace_timestamp}.html"
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load the images to use for all processes
includeConfig 'container_images.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit. Copied from the nf-core template.
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
